// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todo.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	optional "github.com/moznion/go-optional"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos(account_id, title, description, priority)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateTodoParams struct {
	AccountID   uuid.UUID `json:"accountId"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Priority    Priority  `json:"priority"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createTodo,
		arg.AccountID,
		arg.Title,
		arg.Description,
		arg.Priority,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1 AND account_id = $2
`

type DeleteTodoParams struct {
	ID        uuid.UUID `json:"id"`
	AccountID uuid.UUID `json:"accountId"`
}

func (q *Queries) DeleteTodo(ctx context.Context, arg DeleteTodoParams) error {
	_, err := q.db.Exec(ctx, deleteTodo, arg.ID, arg.AccountID)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT title, description, priority, is_done, created_at
FROM todos
WHERE id = $1 AND account_id = $2
`

type GetTodoParams struct {
	ID        uuid.UUID `json:"id"`
	AccountID uuid.UUID `json:"accountId"`
}

type GetTodoRow struct {
	Title       string             `json:"title"`
	Description string             `json:"description"`
	Priority    Priority           `json:"priority"`
	IsDone      bool               `json:"isDone"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
}

func (q *Queries) GetTodo(ctx context.Context, arg GetTodoParams) (GetTodoRow, error) {
	row := q.db.QueryRow(ctx, getTodo, arg.ID, arg.AccountID)
	var i GetTodoRow
	err := row.Scan(
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.IsDone,
		&i.CreatedAt,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, title, description, priority, is_done, created_at
FROM todos
WHERE account_id = $1 AND
    (
        $2 IS NULL OR
        title LIKE '%' || $2 || '%' OR
        description LIKE '%' || $2 || '%'
    ) AND
    ($3 IS NULL OR priority = $3) AND
    ($4 IS NULL OR is_done = $4)
`

type GetTodosParams struct {
	AccountID uuid.UUID   `json:"accountId"`
	Query     interface{} `json:"query"`
	Priority  interface{} `json:"priority"`
	IsDone    interface{} `json:"isDone"`
}

type GetTodosRow struct {
	ID          uuid.UUID          `json:"id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	Priority    Priority           `json:"priority"`
	IsDone      bool               `json:"isDone"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
}

func (q *Queries) GetTodos(ctx context.Context, arg GetTodosParams) ([]GetTodosRow, error) {
	rows, err := q.db.Query(ctx, getTodos,
		arg.AccountID,
		arg.Query,
		arg.Priority,
		arg.IsDone,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTodosRow
	for rows.Next() {
		var i GetTodosRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.IsDone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET
    title = COALESCE($1, title),
    description = COALESCE($2, content),
    priority = COALESCE($3, priority)
WHERE id = $4 AND account_id = $5 AND is_done = false
`

type UpdateTodoParams struct {
	Title       optional.Option[string]   `json:"title"`
	Description optional.Option[string]   `json:"description"`
	Priority    optional.Option[Priority] `json:"priority"`
	ID          uuid.UUID                 `json:"id"`
	AccountID   uuid.UUID                 `json:"accountId"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.Exec(ctx, updateTodo,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.ID,
		arg.AccountID,
	)
	return err
}
